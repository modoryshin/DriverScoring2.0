using Microsoft.VisualStudio.TestTools.UnitTesting;
using ScoreModelImplement;
using System;

namespace UnitTestScoreModel
{
    [TestClass]
    public class ScoreModelTest
    {
        [TestMethod]
        public void Valid_ReturnScore_AllOnes()
        {
            // Arrange
            string data = @"Возраст!1,5:До 25 лет_-20!25-50_+40!За 50_-10
Семейное положение!0,3:Не в браке_0!В браке_+40
Дети!0,8:Нет_-10!Есть_+40
Есть ли в данный момент кредит!0,5:Нет_+20!Есть_-10
Кредитная история!0,5:Отрицательная_-30!Положительная_+20
Трудоустройство!1:Нет/неофициальное_-40!Есть/официальное_+50
Трудовой стаж!0,4:Нет_-40!Менее 2 лет_0!Более 2 лет и менее 5 лет_+20!Более 5 лет_+40
Ур. з/п!1,2:Ниже 2xМРОТ(24к)_-20!2-4 МРОТ (24-48к)_+20!Выше 4xМРОТ(48к)_+40
Паспортные данные!0,3:Не совпадает_-20!Совпадает/верифицировано_+20
Количество аварий за последние 5 лет!1,5:Нет_+30!1-2_0!3-4_-20!Более 4_-40
Водительский стаж!1,2:До года_0!1-2 года_+20!3-5 лет_+30!Более 5_+40
Наличие собственной машины!0,7:Нет_0!Есть_+30"; //Строка содержащая правила для модели скоринга
            ScoreModel testModel = new ScoreModel(data);
            int[] choices = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
            double expected = 234;

            // Act
            double actual = testModel.ReturnScore(choices);

            // Assert
            Assert.AreEqual(expected, actual, 0.0001, "Оценка не соответсвует оценке модели");
        }

        [TestMethod]
        public void Valid_ToPolish_AllOperators()
        {
            // Arrange
            string data = @"Возраст!1,5:До 25 лет_-20!25-50_+40!За 50_-10
Семейное положение!0,3:Не в браке_0!В браке_+40
Дети!0,8:Нет_-10!Есть_+40
Есть ли в данный момент кредит!0,5:Нет_+20!Есть_-10
Кредитная история!0,5:Отрицательная_-30!Положительная_+20
Трудоустройство!1:Нет/неофициальное_-40!Есть/официальное_+50
Трудовой стаж!0,4:Нет_-40!Менее 2 лет_0!Более 2 лет и менее 5 лет_+20!Более 5 лет_+40
Ур. з/п!1,2:Ниже 2xМРОТ(24к)_-20!2-4 МРОТ (24-48к)_+20!Выше 4xМРОТ(48к)_+40
Паспортные данные!0,3:Не совпадает_-20!Совпадает/верифицировано_+20
Количество аварий за последние 5 лет!1,5:Нет_+30!1-2_0!3-4_-20!Более 4_-40
Водительский стаж!1,2:До года_0!1-2 года_+20!3-5 лет_+30!Более 5_+40
Наличие собственной машины!0,7:Нет_0!Есть_+30"; //Строка содержащая правила для модели скоринга
            ScoreModel testModel = new ScoreModel(data);
            string mathExpression = "1+2^3*4-1/2";
            string expected = "1,2,3,^,4,*,1,2,/,-,+";

            // Act
            string actual = testModel.ToReversePolishNotation(mathExpression);

            // Assert
            Assert.AreEqual(expected, actual, "Ошибка перевода");
        }

        [TestMethod]
        public void Valid_ToPolish_DoubleBrackets()
        {
            // Arrange
            string data = @"Возраст!1,5:До 25 лет_-20!25-50_+40!За 50_-10
Семейное положение!0,3:Не в браке_0!В браке_+40
Дети!0,8:Нет_-10!Есть_+40
Есть ли в данный момент кредит!0,5:Нет_+20!Есть_-10
Кредитная история!0,5:Отрицательная_-30!Положительная_+20
Трудоустройство!1:Нет/неофициальное_-40!Есть/официальное_+50
Трудовой стаж!0,4:Нет_-40!Менее 2 лет_0!Более 2 лет и менее 5 лет_+20!Более 5 лет_+40
Ур. з/п!1,2:Ниже 2xМРОТ(24к)_-20!2-4 МРОТ (24-48к)_+20!Выше 4xМРОТ(48к)_+40
Паспортные данные!0,3:Не совпадает_-20!Совпадает/верифицировано_+20
Количество аварий за последние 5 лет!1,5:Нет_+30!1-2_0!3-4_-20!Более 4_-40
Водительский стаж!1,2:До года_0!1-2 года_+20!3-5 лет_+30!Более 5_+40
Наличие собственной машины!0,7:Нет_0!Есть_+30"; //Строка содержащая правила для модели скоринга
            ScoreModel testModel = new ScoreModel(data);
            string mathExpression = "1+2*(3-4+5*((6+7)))/8";
            string expected = "1,2,3,4,-,5,6,7,+,*,+,*,8,/,+";

            // Act
            string actual = testModel.ToReversePolishNotation(mathExpression);

            // Assert
            Assert.AreEqual(expected, actual, "Ошибка перевода");
        }

        [TestMethod]
        public void Exception_ToPolish_MoreOpenBrackets()
        {
            // Arrange
            string data = @"Возраст!1,5:До 25 лет_-20!25-50_+40!За 50_-10
Семейное положение!0,3:Не в браке_0!В браке_+40
Дети!0,8:Нет_-10!Есть_+40
Есть ли в данный момент кредит!0,5:Нет_+20!Есть_-10
Кредитная история!0,5:Отрицательная_-30!Положительная_+20
Трудоустройство!1:Нет/неофициальное_-40!Есть/официальное_+50
Трудовой стаж!0,4:Нет_-40!Менее 2 лет_0!Более 2 лет и менее 5 лет_+20!Более 5 лет_+40
Ур. з/п!1,2:Ниже 2xМРОТ(24к)_-20!2-4 МРОТ (24-48к)_+20!Выше 4xМРОТ(48к)_+40
Паспортные данные!0,3:Не совпадает_-20!Совпадает/верифицировано_+20
Количество аварий за последние 5 лет!1,5:Нет_+30!1-2_0!3-4_-20!Более 4_-40
Водительский стаж!1,2:До года_0!1-2 года_+20!3-5 лет_+30!Более 5_+40
Наличие собственной машины!0,7:Нет_0!Есть_+30"; //Строка содержащая правила для модели скоринга
            ScoreModel testModel = new ScoreModel(data);
            string mathExpression = "1+2*(3-4+5*(6+7)()/8";
            string expected = "Количество закрывающих скобок неравно количеству открывающих";

            // Act
            try
            {
                // Act
                string actual = testModel.ToReversePolishNotation(mathExpression);
            }
            catch (System.Exception e)
            {
                // Assert
                StringAssert.Contains(e.Message, expected);
                return;
            }

            Assert.Fail("The expected exception was not thrown.");
        }

        [TestMethod]
        public void Exception_ToPolish_MoreCloseBrackets()
        {
            // Arrange
            string data = @"Возраст!1,5:До 25 лет_-20!25-50_+40!За 50_-10
Семейное положение!0,3:Не в браке_0!В браке_+40
Дети!0,8:Нет_-10!Есть_+40
Есть ли в данный момент кредит!0,5:Нет_+20!Есть_-10
Кредитная история!0,5:Отрицательная_-30!Положительная_+20
Трудоустройство!1:Нет/неофициальное_-40!Есть/официальное_+50
Трудовой стаж!0,4:Нет_-40!Менее 2 лет_0!Более 2 лет и менее 5 лет_+20!Более 5 лет_+40
Ур. з/п!1,2:Ниже 2xМРОТ(24к)_-20!2-4 МРОТ (24-48к)_+20!Выше 4xМРОТ(48к)_+40
Паспортные данные!0,3:Не совпадает_-20!Совпадает/верифицировано_+20
Количество аварий за последние 5 лет!1,5:Нет_+30!1-2_0!3-4_-20!Более 4_-40
Водительский стаж!1,2:До года_0!1-2 года_+20!3-5 лет_+30!Более 5_+40
Наличие собственной машины!0,7:Нет_0!Есть_+30"; //Строка содержащая правила для модели скоринга
            ScoreModel testModel = new ScoreModel(data);
            string mathExpression = "1+2*(3-4+5*6+7))/8";
            string expected = "Количество закрывающих скобок неравно количеству открывающих";

            // Act
            try
            {
                // Act
                string actual = testModel.ToReversePolishNotation(mathExpression);
            }
            catch (System.Exception e)
            {
                // Assert
                StringAssert.Contains(e.Message, expected);
                return;
            }

            Assert.Fail("The expected exception was not thrown.");
        }

        [TestMethod]
        public void Exception_ToPolish_WrongBrackets()
        {
            // Arrange
            string data = @"Возраст!1,5:До 25 лет_-20!25-50_+40!За 50_-10
Семейное положение!0,3:Не в браке_0!В браке_+40
Дети!0,8:Нет_-10!Есть_+40
Есть ли в данный момент кредит!0,5:Нет_+20!Есть_-10
Кредитная история!0,5:Отрицательная_-30!Положительная_+20
Трудоустройство!1:Нет/неофициальное_-40!Есть/официальное_+50
Трудовой стаж!0,4:Нет_-40!Менее 2 лет_0!Более 2 лет и менее 5 лет_+20!Более 5 лет_+40
Ур. з/п!1,2:Ниже 2xМРОТ(24к)_-20!2-4 МРОТ (24-48к)_+20!Выше 4xМРОТ(48к)_+40
Паспортные данные!0,3:Не совпадает_-20!Совпадает/верифицировано_+20
Количество аварий за последние 5 лет!1,5:Нет_+30!1-2_0!3-4_-20!Более 4_-40
Водительский стаж!1,2:До года_0!1-2 года_+20!3-5 лет_+30!Более 5_+40
Наличие собственной машины!0,7:Нет_0!Есть_+30"; //Строка содержащая правила для модели скоринга
            ScoreModel testModel = new ScoreModel(data);
            string mathExpression = "1+2*(3-4+5*6)+7)1(3/8";
            string expected = "Ошибка в исходном выражении: нарушена последовательность скобок";

            // Act
            try
            {
                // Act
                string actual = testModel.ToReversePolishNotation(mathExpression);
            }
            catch (System.Exception e)
            {
                // Assert
                StringAssert.Contains(e.Message, expected);
                return;
            }

            Assert.Fail("The expected exception was not thrown.");
        }


        [TestMethod]
        public void Exception_ToPolish_DoubleOperator()
        {
            // Arrange
            string data = @"Возраст!1,5:До 25 лет_-20!25-50_+40!За 50_-10
Семейное положение!0,3:Не в браке_0!В браке_+40
Дети!0,8:Нет_-10!Есть_+40
Есть ли в данный момент кредит!0,5:Нет_+20!Есть_-10
Кредитная история!0,5:Отрицательная_-30!Положительная_+20
Трудоустройство!1:Нет/неофициальное_-40!Есть/официальное_+50
Трудовой стаж!0,4:Нет_-40!Менее 2 лет_0!Более 2 лет и менее 5 лет_+20!Более 5 лет_+40
Ур. з/п!1,2:Ниже 2xМРОТ(24к)_-20!2-4 МРОТ (24-48к)_+20!Выше 4xМРОТ(48к)_+40
Паспортные данные!0,3:Не совпадает_-20!Совпадает/верифицировано_+20
Количество аварий за последние 5 лет!1,5:Нет_+30!1-2_0!3-4_-20!Более 4_-40
Водительский стаж!1,2:До года_0!1-2 года_+20!3-5 лет_+30!Более 5_+40
Наличие собственной машины!0,7:Нет_0!Есть_+30"; //Строка содержащая правила для модели скоринга
            ScoreModel testModel = new ScoreModel(data);
            string mathExpression = "1+2*(3-4+5*-(6+7))/8";
            string expected = "Ошибка в исходном выражении: два оператора подряд";

            // Act
            try
            {
                // Act
                string actual = testModel.ToReversePolishNotation(mathExpression);
            }
            catch (System.Exception e)
            {
                // Assert
                StringAssert.Contains(e.Message, expected);
                return;
            }

            Assert.Fail("The expected exception was not thrown.");
        }

        [TestMethod]
        public void Exception_ToPolish_NotOperator()
        {
            // Arrange
            string data = @"Возраст!1,5:До 25 лет_-20!25-50_+40!За 50_-10
Семейное положение!0,3:Не в браке_0!В браке_+40
Дети!0,8:Нет_-10!Есть_+40
Есть ли в данный момент кредит!0,5:Нет_+20!Есть_-10
Кредитная история!0,5:Отрицательная_-30!Положительная_+20
Трудоустройство!1:Нет/неофициальное_-40!Есть/официальное_+50
Трудовой стаж!0,4:Нет_-40!Менее 2 лет_0!Более 2 лет и менее 5 лет_+20!Более 5 лет_+40
Ур. з/п!1,2:Ниже 2xМРОТ(24к)_-20!2-4 МРОТ (24-48к)_+20!Выше 4xМРОТ(48к)_+40
Паспортные данные!0,3:Не совпадает_-20!Совпадает/верифицировано_+20
Количество аварий за последние 5 лет!1,5:Нет_+30!1-2_0!3-4_-20!Более 4_-40
Водительский стаж!1,2:До года_0!1-2 года_+20!3-5 лет_+30!Более 5_+40
Наличие собственной машины!0,7:Нет_0!Есть_+30"; //Строка содержащая правила для модели скоринга
            ScoreModel testModel = new ScoreModel(data);
            string mathExpression = "1+2*(3-4+5*(6+7_8))/8";
            string expected = "Ошибка в исходном выражении: использован символ не являющийся математическим оператором";

            // Act
            try
            {
                // Act
                string actual = testModel.ToReversePolishNotation(mathExpression);
            }
            catch (System.Exception e)
            {
                // Assert
                StringAssert.Contains(e.Message, expected);
                return;
            }

            Assert.Fail("The expected exception was not thrown.");
        }

        [TestMethod]
        public void Valid_CalcWithPolish_AllOperators()
        {
            // Arrange
            string data = @"Возраст!1,5:До 25 лет_-20!25-50_+40!За 50_-10
Есть ли в данный момент кредит!0,5:Нет_+20!Есть_-10
Кредитная история!0,5:Отрицательная_-30!Положительная_+20
Количество аварий за последние 5 лет!1,5:Нет_+30!1-2_0!3-4_-20!Более 4_-40
Водительский стаж!1,2:До года_0!1-2 года_+20!3-5 лет_+30!Более 5_+40
Наличие собственной машины!0,7:Нет_0!Есть_+30"; //Строка содержащая правила для модели скоринга

            ScoreModel testModel = new ScoreModel(data);
            int[] choices = { 1, 1, 0, 2, 0, 1};
            string mathExpression = "1+2-3*4/6^5";
            double expected = 40*1.5 + -10*0.5 - -30*0.5 * -20*1.5 / Math.Pow(30*0.7, 0*1.2);
            testModel.ToReversePolishNotation(mathExpression);

            // Act
            double actual = testModel.CalculateWithPolish(choices);

            // Assert
            Assert.AreEqual(expected, actual, "Ошибка вычислений");
        }


        //TODO: Добавить ещё тестов к этим функциям
        //TODO: Протестировать другие функции
    }
}
